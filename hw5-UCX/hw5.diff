[1mdiff --git a/.vscode/settings.json b/.vscode/settings.json[m
[1mnew file mode 100644[m
[1mindex 0000000..b4460ff[m
[1m--- /dev/null[m
[1m+++ b/.vscode/settings.json[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m{[m
[32m+[m[32m    "files.associations": {[m
[32m+[m[32m        "*.tcc": "c",[m
[32m+[m[32m        "optional": "c",[m
[32m+[m[32m        "ratio": "c",[m
[32m+[m[32m        "system_error": "c",[m
[32m+[m[32m        "array": "c",[m
[32m+[m[32m        "functional": "c",[m
[32m+[m[32m        "tuple": "c",[m
[32m+[m[32m        "type_traits": "c",[m
[32m+[m[32m        "utility": "c",[m
[32m+[m[32m        "variant": "c"[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/ucp/core/ucp_worker.c b/src/ucp/core/ucp_worker.c[m
[1mindex 5adcee9..27fa0a2 100644[m
[1m--- a/src/ucp/core/ucp_worker.c[m
[1m+++ b/src/ucp/core/ucp_worker.c[m
[36m@@ -1777,7 +1777,7 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
     int amo_emul                    = 0;[m
     int num_valid_lanes             = 0;[m
     ucp_lane_index_t lane;[m
[31m-[m
[32m+[m[32m    ucp_config_t *config = NULL;[m
     ucp_ep_config_name(worker, cfg_index, &strb);[m
 [m
     for (lane = 0; lane < key->num_lanes; ++lane) {[m
[36m@@ -1852,7 +1852,10 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
 [m
     ucs_string_buffer_rtrim(&strb, "; ");[m
 [m
[32m+[m[32m    ucp_config_read(NULL , NULL , &config);[m
[32m+[m[32m    ucp_config_print(config , stdout , NULL , UCS_CONFIG_PRINT_TLS);[m
     ucs_info("%s", ucs_string_buffer_cstr(&strb));[m
[32m+[m[32m    printf("%s\n", ucs_string_buffer_cstr(&strb));[m
 }[m
 [m
 static ucs_status_t ucp_worker_init_mpools(ucp_worker_h worker)[m
[1mdiff --git a/src/ucs/config/parser.c b/src/ucs/config/parser.c[m
[1mindex a13d508..fe5bc96 100644[m
[1m--- a/src/ucs/config/parser.c[m
[1m+++ b/src/ucs/config/parser.c[m
[36m@@ -1878,8 +1878,12 @@[m [mvoid ucs_config_parser_print_opts(FILE *stream, const char *title, const void *o[m
     }[m
 [m
     // TODO: PP-HW-UCX[m
[31m-    if (flags /*& UCS_CONFIG_PRINT_TLS*/) {[m
[31m-[m
[32m+[m[32m    if (flags & UCS_CONFIG_PRINT_TLS) {[m
[32m+[m[32m        char *tls_config = getenv("UCX_TLS");[m
[32m+[m[32m        fprintf(stream, "UCX_TLS=%s\n", tls_config);[m
[32m+[m[32m        // char tls[128];[m
[32m+[m[32m        // ucs_config_parser_get_value((void*)opts , fields , "TLS" , tls , sizeof(tls));[m
[32m+[m[32m        // fprintf(stream, "UCX_TLS=%s\n", tls);[m
     }[m
 [m
     if (flags & UCS_CONFIG_PRINT_HEADER) {[m
[1mdiff --git a/src/ucs/config/types.h b/src/ucs/config/types.h[m
[1mindex c300a6b..cf2c72a 100644[m
[1m--- a/src/ucs/config/types.h[m
[1m+++ b/src/ucs/config/types.h[m
[36m@@ -90,7 +90,8 @@[m [mtypedef enum {[m
     UCS_CONFIG_PRINT_HEADER          = UCS_BIT(1),[m
     UCS_CONFIG_PRINT_DOC             = UCS_BIT(2),[m
     UCS_CONFIG_PRINT_HIDDEN          = UCS_BIT(3),[m
[31m-    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4)[m
[32m+[m[32m    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4),[m
[32m+[m[32m    UCS_CONFIG_PRINT_TLS             = UCS_BIT(5)[m
 } ucs_config_print_flags_t;[m
 [m
 [m
